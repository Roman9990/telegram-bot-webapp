# -*- coding: utf-8 -*-

import asyncio
import sqlite3
import time
import logging
import re
import os
import json
from typing import Optional, Tuple, List
from datetime import datetime, timezone
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup,
    ChatMemberUpdated, ContentType, WebAppInfo
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
API_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê_–ó–î–ï–°–¨"  # –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô –¢–û–ö–ï–ù!
GROUP_ID = -1002790143289  # ID –≥—Ä—É–ø–ø—ã-–æ—á–µ—Ä–µ–¥–∏
LOG_GROUP_ID = -1002967411172  # ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
OWNER_ID = 6618163794  # –í–∞—à Telegram ID

# URL –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π - GitHub Pages URLs
USER_WEBAPP_URL = "https://YOUR_USERNAME.github.io/telegram-bot-webapp/user-app.html"
ADMIN_WEBAPP_URL = "https://YOUR_USERNAME.github.io/telegram-bot-webapp/admin-panel.html"

DB_PATH = "bot.db"

bot = Bot(API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")

# ========== –°–•–ï–ú–ê –ë–î ==========
def utc_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn

def column_exists(table_name, column_name):
    conn = db()
    cursor = conn.execute(f"PRAGMA table_info({table_name})")
    columns = [row[1] for row in cursor.fetchall()]
    conn.close()
    return column_name in columns

def init_db():
    conn = db()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
    conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        role TEXT DEFAULT 'user',
        first_seen TEXT,
        last_seen TEXT,
        user_tag TEXT,
        admin_tag TEXT
    )""")
    
    conn.execute("""
    CREATE TABLE IF NOT EXISTS stats (
        key TEXT PRIMARY KEY,
        value INTEGER DEFAULT 0
    )""")
    
    conn.execute("""
    CREATE TABLE IF NOT EXISTS user_admin (
        user_id INTEGER PRIMARY KEY,
        admin_id INTEGER,
        wants_admin INTEGER DEFAULT 0,
        created_at TEXT
    )""")
    
    conn.execute("""
    CREATE TABLE IF NOT EXISTS bans (
        user_id INTEGER PRIMARY KEY,
        until_ts INTEGER,
        reason TEXT,
        banned_by INTEGER,
        banned_at TEXT
    )""")
    
    conn.execute("""
    CREATE TABLE IF NOT EXISTS action_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        action TEXT,
        target_id INTEGER,
        details TEXT,
        timestamp TEXT
    )""")
    
    conn.execute("""
    CREATE TABLE IF NOT EXISTS admin_requests (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        admin_id INTEGER,
        status TEXT DEFAULT 'pending',
        created_at TEXT,
        processed_at TEXT
    )""")
    
    # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è WebApp –¥–∞–Ω–Ω—ã—Ö
    conn.execute("""
    CREATE TABLE IF NOT EXISTS webapp_sessions (
        user_id INTEGER PRIMARY KEY,
        session_data TEXT,
        last_update TEXT
    )""")
    
    conn.commit()
    conn.close()

def run_migrations():
    conn = db()
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if not column_exists('users', 'user_tag'):
            conn.execute("ALTER TABLE users ADD COLUMN user_tag TEXT")
        if not column_exists('users', 'admin_tag'):
            conn.execute("ALTER TABLE users ADD COLUMN admin_tag TEXT")
        conn.commit()
    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
    finally:
        conn.close()

# ========== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==========
def inc_stat(key: str):
    conn = db()
    conn.execute("INSERT OR IGNORE INTO stats (key, value) VALUES (?, 0)", (key,))
    conn.execute("UPDATE stats SET value = value + 1 WHERE key = ?", (key,))
    conn.commit()
    conn.close()

def get_stat(key: str) -> int:
    conn = db()
    cur = conn.execute("SELECT value FROM stats WHERE key = ?", (key,))
    row = cur.fetchone()
    conn.close()
    return row['value'] if row else 0

# ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ==========
def add_or_touch_user(uid: int, username: str = None):
    conn = db()
    now = utc_iso()
    cur = conn.execute("SELECT * FROM users WHERE user_id = ?", (uid,))
    exists = cur.fetchone()
    
    if exists:
        conn.execute("UPDATE users SET last_seen = ?, username = ? WHERE user_id = ?", (now, username, uid))
    else:
        conn.execute("INSERT INTO users (user_id, username, first_seen, last_seen) VALUES (?, ?, ?, ?)",
                     (uid, username, now, now))
    conn.commit()
    conn.close()

def set_user_role(uid: int, role: str):
    conn = db()
    conn.execute("UPDATE users SET role = ? WHERE user_id = ?", (role, uid))
    conn.commit()
    conn.close()

def get_user_role(uid: int) -> str:
    conn = db()
    cur = conn.execute("SELECT role FROM users WHERE user_id = ?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row['role'] if row else 'user'

def get_user_info(uid: int) -> dict:
    conn = db()
    cur = conn.execute("SELECT * FROM users WHERE user_id = ?", (uid,))
    row = cur.fetchone()
    conn.close()
    return dict(row) if row else None

def get_all_user_ids() -> List[int]:
    conn = db()
    cur = conn.execute("SELECT user_id FROM users")
    result = [row[0] for row in cur.fetchall()]
    conn.close()
    return result

def is_admin(uid: int) -> bool:
    return get_user_role(uid) == 'admin'

def get_user_tag(uid: int) -> Optional[str]:
    conn = db()
    cur = conn.execute("SELECT user_tag FROM users WHERE user_id = ?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row['user_tag'] if row and row['user_tag'] else None

def set_user_tag(uid: int, tag: str):
    conn = db()
    conn.execute("UPDATE users SET user_tag = ? WHERE user_id = ?", (tag, uid))
    conn.commit()
    conn.close()

def get_admin_tag(uid: int) -> Optional[str]:
    conn = db()
    cur = conn.execute("SELECT admin_tag FROM users WHERE user_id = ?", (uid,))
    row = cur.fetchone()
    conn.close()
    return row['admin_tag'] if row and row['admin_tag'] else None

def set_admin_tag(uid: int, tag: str):
    conn = db()
    conn.execute("UPDATE users SET admin_tag = ? WHERE user_id = ?", (tag, uid))
    conn.commit()
    conn.close()

def get_all_tags() -> List[str]:
    conn = db()
    cur = conn.execute("SELECT DISTINCT user_tag FROM users WHERE user_tag IS NOT NULL")
    result = [row[0] for row in cur.fetchall()]
    conn.close()
    return result

def get_all_admins() -> List[dict]:
    conn = db()
    cur = conn.execute("SELECT user_id, username, admin_tag as tag FROM users WHERE role = 'admin'")
    result = [dict(row) for row in cur.fetchall()]
    conn.close()
    return result

def get_admin_by_tag(tag: str) -> Optional[int]:
    conn = db()
    cur = conn.execute("SELECT user_id FROM users WHERE admin_tag = ? AND role = 'admin'", (tag,))
    row = cur.fetchone()
    conn.close()
    return row['user_id'] if row else None

# ========== WEBAPP –§–£–ù–ö–¶–ò–ò ==========
def save_webapp_session(user_id: int, session_data: dict):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ WebApp"""
    conn = db()
    now = utc_iso()
    data_json = json.dumps(session_data, ensure_ascii=False)
    conn.execute("INSERT OR REPLACE INTO webapp_sessions (user_id, session_data, last_update) VALUES (?, ?, ?)",
                 (user_id, data_json, now))
    conn.commit()
    conn.close()

def get_webapp_session(user_id: int) -> Optional[dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ WebApp"""
    conn = db()
    cur = conn.execute("SELECT session_data FROM webapp_sessions WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    
    if row and row['session_data']:
        try:
            return json.loads(row['session_data'])
        except:
            return None
    return None

def get_admins_for_webapp() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    admins = get_all_admins()
    admin_list = []
    
    for admin in admins:
        admin_info = get_user_info(admin['user_id'])
        if admin_info:
            admin_list.append({
                'id': admin['user_id'],
                'tag': admin['tag'] or f"admin_{admin['user_id']}",
                'name': admin['tag'] or f"–ê–¥–º–∏–Ω {admin['user_id']}",
                'username': admin_info.get('username', ''),
                'specialization': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
                'status': 'online',
                'rating': 5,
                'responseTime': '2 –º–∏–Ω',
                'avatar': 'ü¶π‚ôÇÔ∏è'
            })
    
    return {
        'admins': admin_list,
        'stats': {
            'online': len([a for a in admin_list if a['status'] == 'online']),
            'total': len(admin_list)
        }
    }

def get_admin_panel_data(admin_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    admin_info = get_user_info(admin_id)
    admin_tag = get_admin_tag(admin_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —ç—Ç–æ–º—É –∞–¥–º–∏–Ω—É
    conn = db()
    cur = conn.execute("""
    SELECT ar.*, u.username, u.user_tag
    FROM admin_requests ar
    JOIN users u ON ar.user_id = u.user_id
    WHERE ar.admin_id = ? AND ar.status = 'pending'
    ORDER BY ar.created_at DESC
    """, (admin_id,))
    pending_requests = [dict(row) for row in cur.fetchall()]
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
    cur = conn.execute("""
    SELECT ua.*, u.username, u.user_tag
    FROM user_admin ua
    JOIN users u ON ua.user_id = u.user_id
    WHERE ua.admin_id = ?
    ORDER BY ua.created_at DESC
    """, (admin_id,))
    active_dialogs = [dict(row) for row in cur.fetchall()]
    conn.close()
    
    return {
        'currentAdmin': {
            'id': admin_id,
            'tag': admin_tag or f'admin_{admin_id}',
            'name': admin_tag or f'–ê–¥–º–∏–Ω {admin_id}',
            'status': 'online',
            'specialization': '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
            'avatar': 'üí¨'
        },
        'pendingRequests': [
            {
                'id': req['id'],
                'userId': req['user_id'],
                'userName': req['user_tag'] or req['username'] or f'user_{req["user_id"]}',
                'username': f"@{req['username']}" if req['username'] else '',
                'requestTime': req['created_at'],
                'priority': 'medium',
                'category': '–û–±—â–∏–π –≤–æ–ø—Ä–æ—Å',
                'message': '–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                'waitingTime': '5 –º–∏–Ω'
            }
            for req in pending_requests
        ],
        'activeDialogs': [
            {
                'userId': dialog['user_id'],
                'userName': dialog['user_tag'] or dialog['username'] or f'user_{dialog["user_id"]}',
                'username': f"@{dialog['username']}" if dialog['username'] else '',
                'startTime': dialog['created_at'],
                'lastMessage': '–ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥',
                'unreadCount': 0,
                'status': 'active'
            }
            for dialog in active_dialogs
        ],
        'todayStats': {
            'totalRequests': 23,
            'acceptedRequests': 18,
            'rejectedRequests': 2,
            'avgResponseTime': '2.5 –º–∏–Ω'
        }
    }

# ========== –ó–ê–ü–†–û–°–´ –ö –ê–î–ú–ò–ù–ê–ú ==========
def create_admin_request(user_id: int, admin_id: int):
    conn = db()
    now = utc_iso()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conn.execute("DELETE FROM admin_requests WHERE user_id = ?", (user_id,))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    conn.execute("INSERT INTO admin_requests (user_id, admin_id, created_at) VALUES (?, ?, ?)",
                 (user_id, admin_id, now))
    conn.commit()
    conn.close()

def get_admin_request(user_id: int) -> Optional[dict]:
    conn = db()
    cur = conn.execute("SELECT * FROM admin_requests WHERE user_id = ? AND status = 'pending'", (user_id,))
    row = cur.fetchone()
    conn.close()
    return dict(row) if row else None

def process_admin_request(user_id: int, status: str):
    conn = db()
    now = utc_iso()
    conn.execute("UPDATE admin_requests SET status = ?, processed_at = ? WHERE user_id = ? AND status = 'pending'",
                 (status, now, user_id))
    conn.commit()
    conn.close()

# ========== –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –ê–î–ú–ò–ù–ê ==========
def assign_admin_to_user(user_id: int, admin_id: int):
    conn = db()
    now = utc_iso()
    conn.execute("INSERT OR REPLACE INTO user_admin (user_id, admin_id, created_at) VALUES (?, ?, ?)",
                 (user_id, admin_id, now))
    conn.commit()
    conn.close()

def get_current_admin(user_id: int) -> Optional[int]:
    conn = db()
    cur = conn.execute("SELECT admin_id FROM user_admin WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    return row['admin_id'] if row else None

def remove_admin_from_user(user_id: int):
    conn = db()
    conn.execute("DELETE FROM user_admin WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def get_user_mode(user_id: int) -> Tuple[Optional[int], bool]:
    conn = db()
    cur = conn.execute("SELECT admin_id, wants_admin FROM user_admin WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    
    if row:
        return row['admin_id'], bool(row['wants_admin'])
    return None, False

# ========== –ë–ê–ù–´ ==========
def ban_user(user_id: int, until_ts: int, reason: str, banned_by: int):
    conn = db()
    now = utc_iso()
    conn.execute("INSERT OR REPLACE INTO bans (user_id, until_ts, reason, banned_by, banned_at) VALUES (?, ?, ?, ?, ?)",
                 (user_id, until_ts, reason, banned_by, now))
    conn.commit()
    conn.close()

def unban_user(user_id: int):
    conn = db()
    conn.execute("DELETE FROM bans WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def is_banned(user_id: int) -> bool:
    conn = db()
    cur = conn.execute("SELECT until_ts FROM bans WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    conn.close()
    
    if not row:
        return False
    return row['until_ts'] > int(time.time())

# ========== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ==========
def log_action(user_id: int, action: str, target_id: int = None, details: str = None):
    conn = db()
    now = utc_iso()
    conn.execute("INSERT INTO action_log (user_id, action, target_id, details, timestamp) VALUES (?, ?, ?, ?, ?)",
                 (user_id, action, target_id, details, now))
    conn.commit()
    conn.close()

async def log_dialog(message: Message, from_user: bool, admin_id: int = None, user_id: int = None):
    try:
        direction = "üë§‚Üíü¶π‚ôÇÔ∏è" if from_user else "ü¶π‚ôÇÔ∏è‚Üíüë§"
        tag = get_admin_tag(admin_id) if admin_id else ""
        admin_name = f"#{tag}" if tag else f"ID:{admin_id}"
        log_text = f"{direction} {admin_name} ‚Üî {user_id}\n"
        
        if message.text:
            log_text += f"üìù {message.text}"
        elif message.photo:
            log_text += f"üñº –§–æ—Ç–æ: {message.caption or '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        elif message.video:
            log_text += f"üé• –í–∏–¥–µ–æ: {message.caption or '–±–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}"
        elif message.document:
            log_text += f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç: {message.document.file_name or '–±–µ–∑ –∏–º–µ–Ω–∏'}"
        elif message.sticker:
            log_text += f"üé≠ –°—Ç–∏–∫–µ—Ä"
        else:
            log_text += f"üìé –ú–µ–¥–∏–∞"
        
        await bot.send_message(LOG_GROUP_ID, log_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# ========== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ==========
async def send_any(target_id: int, source: Message, *, prefix: str = "", kb: InlineKeyboardMarkup | None = None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if source.text:
            await bot.send_message(target_id, f"{prefix}{source.text}", reply_markup=kb)
        elif source.photo:
            await bot.send_photo(target_id, source.photo[-1].file_id, caption=f"{prefix}{source.caption or ''}", reply_markup=kb)
        elif source.video:
            await bot.send_video(target_id, source.video.file_id, caption=f"{prefix}{source.caption or ''}", reply_markup=kb)
        elif source.document:
            await bot.send_document(target_id, source.document.file_id, caption=f"{prefix}{source.caption or ''}", reply_markup=kb)
        elif source.audio:
            await bot.send_audio(target_id, source.audio.file_id, caption=f"{prefix}{source.caption or ''}", reply_markup=kb)
        elif source.voice:
            if prefix:
                await bot.send_message(target_id, prefix)
            await bot.send_voice(target_id, source.voice.file_id, reply_markup=kb)
        elif source.sticker:
            if prefix:
                await bot.send_message(target_id, prefix)
            await bot.send_sticker(target_id, source.sticker.file_id, reply_markup=kb)
        elif source.video_note:
            if prefix:
                await bot.send_message(target_id, prefix)
            await bot.send_video_note(target_id, source.video_note.file_id, reply_markup=kb)
        elif source.animation:
            await bot.send_animation(target_id, source.animation.file_id, caption=f"{prefix}{source.caption or ''}", reply_markup=kb)
        elif source.location:
            if prefix:
                await bot.send_message(target_id, prefix)
            await bot.send_location(target_id, source.location.latitude, source.location.longitude, reply_markup=kb)
        elif source.contact:
            if prefix:
                await bot.send_message(target_id, prefix)
            await bot.send_contact(target_id, source.contact.phone_number, source.contact.first_name,
                                   last_name=source.contact.last_name, reply_markup=kb)
        else:
            await bot.send_message(target_id, f"{prefix}–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", reply_markup=kb)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {target_id}: {str(e)}")
        try:
            if prefix:
                await bot.send_message(target_id, f"{prefix}–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –¢–µ–∫—Å—Ç: {source.text or source.caption or '–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞'}")
        except Exception:
            pass

def format_user_info(u: Message.from_user) -> str:
    return f"üÜî ID: `{u.from_user.id}`\nüë§ –ò–º—è: {u.from_user.full_name}\nüîó Username: @{u.from_user.username or '–Ω–µ—Ç'}"

def extract_uid_from_text(s: str) -> Optional[int]:
    m = re.search(r"ID:\s*`(\d+)`", s)
    if m:
        return int(m.group(1))
    m2 = re.search(r"ID:\s*(\d+)", s)
    if m2:
        return int(m2.group(1))
    return None

# ========== –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ==========

@dp.message(Command("start"))
async def cmd_start(message: Message):
    add_or_touch_user(message.from_user.id, message.from_user.username)
    inc_stat("start_count")
    
    # –ù–æ–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = """–•–∞–π! üëã –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ –∏ –∂–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –≤—Ä–µ–º—è. –ú—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö –Ω–µ–ø—Ä–æ—Å—Ç—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –ù–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å. ‚ù§Ô∏è

üî• –ß—Ç–æ–±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /admin

üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/profile - –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
/admin - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
    
    await message.answer(welcome_text)

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üë§ **–î–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
/admin - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

üîß **–î–ª—è –∞–¥–º–∏–Ω–æ–≤:**
/list_admins - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
/admin_panel - –û—Ç–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/user_info [user_id] - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
/soo <—Ç–µ–∫—Å—Ç> - –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º

üëë **–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:**
/tag <—Ç–µ–≥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–≥
/set_tag <—Ç–µ–≥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–±–µ —Ç–µ–≥
/set_role <—Ä–æ–ª—å> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/admin_tag <—Ç–µ–≥> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ–≥
/tags - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–µ–≥–∏
/ban <—Å—Ä–æ–∫> <–ø—Ä–∏—á–∏–Ω–∞> - –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/unban - –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    
    await message.answer(help_text)

@dp.message(Command("profile"))
async def cmd_profile(message: Message):
    uid = message.from_user.id
    role = get_user_role(uid)
    tag = get_user_tag(uid)
    admin_tag = get_admin_tag(uid) if is_admin(uid) else None
    current_admin_id, wants_admin = get_user_mode(uid)
    admin_status = f"–ü—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω—É #{get_admin_tag(current_admin_id) or current_admin_id}" if current_admin_id else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    out = [
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        f"üÜî ID: `{uid}`",
        f"üìõ –ò–º—è: {message.from_user.full_name}",
        f"üîó Username: @{message.from_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
        f"üé≠ –†–æ–ª—å: {role}",
        f"üìä –°—Ç–∞—Ç—É—Å: {admin_status}"
    ]
    
    if tag:
        out.append(f"üè∑Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–≥: #{tag}")
    if admin_tag:
        out.append(f"ü¶π‚ôÇÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ–≥: #{admin_tag}")
    
    await message.answer("\n".join(out))

# ========== WEBAPP –•–ï–ù–î–õ–ï–†–´ ==========

@dp.message(Command("admin"))
async def cmd_admin(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å WebApp"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    existing_request = get_admin_request(message.from_user.id)
    if existing_request:
        admin_tag = get_admin_tag(existing_request['admin_id']) or f"ID:{existing_request['admin_id']}"
        await message.answer(f"‚è≥ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É #{admin_tag}. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
    webapp = WebAppInfo(url=USER_WEBAPP_URL)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ°Ô∏è –í—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", web_app=webapp)],
        [InlineKeyboardButton(text="üìû –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="quick_support")]
    ])
    
    await message.answer(
        "üë• **–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É**\n\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "‚ö° –ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
        reply_markup=kb
    )

@dp.message(Command("admin_panel"))
async def cmd_admin_panel(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    webapp = WebAppInfo(url=ADMIN_WEBAPP_URL)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõ°Ô∏è –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", web_app=webapp)]
    ])
    
    admin_tag = get_admin_tag(message.from_user.id)
    await message.answer(
        f"ü¶π‚ôÇÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å #{admin_tag or 'admin'}**\n\n"
        "üìä –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –¥–∏–∞–ª–æ–≥–∞–º–∏\n"
        "üìà –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å",
        reply_markup=kb
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message(F.web_app_data)
async def handle_webapp_data(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
    try:
        data = json.loads(message.web_app_data.data)
        action = data.get('action')
        
        if action == 'select_admin':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            admin_id = data.get('admin_id')
            if not admin_id:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if not is_admin(admin_id):
                await message.answer("‚ùå –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
            create_admin_request(message.from_user.id, admin_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
            admin_tag = get_admin_tag(admin_id)
            kb = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{message.from_user.id}")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{message.from_user.id}")]
            ])
            
            try:
                user_tag = get_user_tag(message.from_user.id)
                await bot.send_message(admin_id,
                    f"üîî **–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ**\n\n" +
                    f"üÜî ID: `{message.from_user.id}`\n" +
                    f"üë§ –ò–º—è: {message.from_user.full_name}\n" +
                    f"üîó Username: @{message.from_user.username or '–Ω–µ—Ç'}\n" +
                    f"üè∑Ô∏è –¢–µ–≥: #{user_tag or '–Ω–µ—Ç'}\n\n" +
                    f"üí≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–∞—Å —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
                    reply_markup=kb
                )
                
                await message.answer(f"üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É **#{admin_tag}**\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
                inc_stat("webapp_requests")
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        elif action == 'admin_action':
            # –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            if not is_admin(message.from_user.id):
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
                return
            
            sub_action = data.get('sub_action')
            target_user = data.get('user_id')
            
            if sub_action == 'accept_request' and target_user:
                # –ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
                process_admin_request(target_user, "accepted")
                assign_admin_to_user(target_user, message.from_user.id)
                admin_tag = get_admin_tag(message.from_user.id)
                
                kb = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="user_cancel")]
                ])
                
                try:
                    await bot.send_message(target_user,
                        f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä **#{admin_tag}** –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n"
                        f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                        f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ - –≤—Å–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!",
                        reply_markup=kb
                    )
                    await message.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
                except Exception as e:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
            elif sub_action == 'reject_request' and target_user:
                # –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
                process_admin_request(target_user, "rejected")
                try:
                    await bot.send_message(target_user,
                        "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                    )
                    await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
                except Exception as e:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        save_webapp_session(message.from_user.id, data)
        
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏
@dp.message(Command("webapp_data"))
async def cmd_webapp_data(message: Message):
    """API –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è WebApp"""
    user_id = message.from_user.id
    if is_admin(user_id):
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        data = get_admin_panel_data(user_id)
    else:
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        data = get_admins_for_webapp()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ JSON
    await message.answer(f"```json\n{json.dumps(data, ensure_ascii=False, indent=2)}\n```")

@dp.callback_query(F.data == "quick_support")
async def cb_quick_support(query: CallbackQuery):
    """–ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞"""
    admins = get_all_admins()
    if not admins:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", show_alert=True)
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
    admin = admins[0]
    admin_id = admin['user_id']
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
    create_admin_request(query.from_user.id, admin_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–¥–º–∏–Ω—É
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{query.from_user.id}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{query.from_user.id}")]
    ])
    
    try:
        admin_tag = get_admin_tag(admin_id)
        user_tag = get_user_tag(query.from_user.id)
        await bot.send_message(admin_id,
            f"‚ö° **–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n" +
            f"üÜî ID: `{query.from_user.id}`\n" +
            f"üë§ –ò–º—è: {query.from_user.full_name}\n" +
            f"üîó Username: @{query.from_user.username or '–Ω–µ—Ç'}\n" +
            f"üè∑Ô∏è –¢–µ–≥: #{user_tag or '–Ω–µ—Ç'}\n\n" +
            f"üí≠ –ë—ã—Å—Ç—Ä–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - –∞–≤—Ç–æ–≤—ã–±–æ—Ä.",
            reply_markup=kb
        )
        
        await query.message.edit_text(f"üì® –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É **#{admin_tag}**\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...")
        inc_stat("quick_support_requests")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–±–µ–∫–∏ —Å —Ç–µ–≥–∞–º–∏
@dp.callback_query(F.data.startswith("accept_"))
async def cb_accept(query: CallbackQuery):
    user_id = int(query.data.split("_")[1])
    admin_id = query.from_user.id
    
    request = get_admin_request(user_id)
    if not request or request['admin_id'] != admin_id:
        await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return
    
    process_admin_request(user_id, "accepted")
    assign_admin_to_user(user_id, admin_id)
    
    await query.message.edit_text(
        query.message.text + "\n\n‚úÖ **–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç**",
        reply_markup=None
    )
    
    admin_tag = get_admin_tag(admin_id) or f"admin_{admin_id}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="user_cancel")]
    ])
    
    try:
        await bot.send_message(user_id,
            f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä **#{admin_tag}** –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n"
            f"üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ - –≤—Å–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!",
            reply_markup=kb)
        inc_stat("admin_accepts")
        log_action(admin_id, "accept_request", user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    await query.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")

@dp.callback_query(F.data.startswith("reject_"))
async def cb_admin_reject(query: CallbackQuery):
    user_id = int(query.data.split("_")[1])
    admin_id = query.from_user.id
    
    request = get_admin_request(user_id)
    if not request or request['admin_id'] != admin_id:
        await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        return
    
    process_admin_request(user_id, "rejected")
    
    await query.message.edit_text(
        query.message.text + "\n\n‚ùå **–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω**",
        reply_markup=None
    )
    
    try:
        await bot.send_message(user_id,
            "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥–æ–π /admin")
        log_action(admin_id, "reject_request", user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    await query.answer("‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")

@dp.callback_query(F.data == "user_cancel")
async def cb_user_cancel(query: CallbackQuery):
    user_id = query.from_user.id
    admin_id = get_current_admin(user_id)
    
    if admin_id:
        remove_admin_from_user(user_id)
        try:
            user_tag = get_user_tag(user_id) or f"user_{user_id}"
            await bot.send_message(admin_id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **#{user_tag}** –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ª–æ–≥")
            log_action(user_id, "user_cancel", admin_id)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")
    
    await query.message.edit_text("üö´ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.", reply_markup=None)
    await query.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

# ========== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ==========

@dp.message(Command("list_admins"))
async def cmd_list_admins(message: Message):
    admins = get_all_admins()
    if not admins:
        await message.answer("üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    
    lines = ["üìã **–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:**"]
    for r in admins:
        lines.append(f"üÜî `{r['user_id']}` | @{r['username'] or '–Ω–µ—Ç'} | #{r['tag'] or '–±–µ–∑ —Ç–µ–≥–∞'}")
    
    await message.answer("\n".join(lines))

@dp.message(Command("user_info"))
async def cmd_user_info(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if message.reply_to_message:
        user_id = message.reply_to_message.from_user.id
    else:
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_info user_id –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        try:
            user_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = get_user_info(user_id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    role = user["role"]
    tag = get_user_tag(user_id)
    admin_tag = get_admin_tag(user_id) if is_admin(user_id) else None
    banned = is_banned(user_id)
    current_admin_id, wants_admin = get_user_mode(user_id)
    admin_status = f"–ü—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–¥–º–∏–Ω—É {current_admin_id}" if current_admin_id else "–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    out = [
        f"üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**",
        f"üÜî ID: `{user_id}`",
        f"üìõ –ò–º—è: {user['username'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}",
        f"üé≠ –†–æ–ª—å: {role}",
        f"üìä –°—Ç–∞—Ç—É—Å: {admin_status}",
        f"‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if banned else '–ù–µ—Ç'}",
        f"üìÖ –ü–µ—Ä–≤—ã–π –≤–∏–∑–∏—Ç: {user['first_seen']}",
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: {user['last_seen']}"
    ]
    
    if tag:
        out.append(f"üè∑Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–≥: #{tag}")
    if admin_tag:
        out.append(f"ü¶π‚ôÇÔ∏è –ê–¥–º–∏–Ω—Å–∫–∏–π —Ç–µ–≥: #{admin_tag}")
    
    await message.answer("\n".join(out))

@dp.message(Command("soo"))
async def cmd_soo(message: Message):
    if message.from_user.id != OWNER_ID and not get_user_tag(message.from_user.id):
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    
    sent = 0
    if message.reply_to_message:
        for uid in get_all_user_ids():
            try:
                await bot.copy_message(uid, message.chat.id, message.reply_to_message.message_id)
                sent += 1
            except Exception:
                pass
    else:
        parts = (message.text or "").split(maxsplit=1)
        if len(parts) < 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /soo —Ç–µ–∫—Å—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return
        
        text = parts[1]
        for uid in get_all_user_ids():
            try:
                await bot.send_message(uid, f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text}")
                sent += 1
            except Exception:
                pass
    
    await message.answer(f"‚úÖ –†–∞–∑–æ—Å–ª–∞–Ω–æ: {sent}")
    inc_stat("broadcasts")
    log_action(message.from_user.id, "broadcast", details=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}")

# ========== –ö–û–ú–ê–ù–î–´ –í–õ–ê–î–ï–õ–¨–¶–ê ==========

@dp.message(Command("tag"))
async def cmd_tag(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /tag user_id —Ç–µ–≥")
        return
    
    try:
        user_id = int(parts[1])
        tag = parts[2].strip().lstrip("#@")
        set_user_tag(user_id, tag)
        log_action(message.from_user.id, "set_user_tag", user_id, tag)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: #{tag}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")

@dp.message(Command("set_tag"))
async def cmd_set_tag(message: Message):
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_tag —Ç–µ–≥")
        return
    
    tag = parts[1].strip().lstrip("#@")
    set_user_tag(message.from_user.id, tag)
    log_action(message.from_user.id, "set_own_tag", details=tag)
    await message.answer(f"‚úÖ –í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: #{tag}")

@dp.message(Command("set_role"))
async def cmd_set_role(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_role user_id —Ä–æ–ª—å")
        return
    
    try:
        user_id = int(parts[1])
        role = parts[2]
        set_user_role(user_id, role)
        log_action(message.from_user.id, "set_role", user_id, role)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–æ–ª—å: {role}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")

@dp.message(Command("admin_tag"))
async def cmd_admin_tag(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_tag user_id —Ç–µ–≥")
        return
    
    try:
        user_id = int(parts[1])
        tag = parts[2].strip().lstrip("#@")
        set_admin_tag(user_id, tag)
        log_action(message.from_user.id, "set_admin_tag", user_id, tag)
        await message.answer(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: #{tag}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")

@dp.message(Command("tags"))
async def cmd_tags(message: Message):
    tags = get_all_tags()
    if not tags:
        await message.answer("üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤ –Ω–µ—Ç.")
        return
    
    await message.answer("üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–≥–∏:\n" + "\n".join([f"#{tag}" for tag in tags]))

@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (message.text or "").split()
    if len(parts) < 4:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban user_id —Å—Ä–æ–∫ –ø—Ä–∏—á–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /ban 123456 1d —Å–ø–∞–º)")
        return
    
    try:
        user_id = int(parts[1])
        duration = parts[2]
        reason = " ".join(parts[3:])
        
        if duration.endswith("d"):
            hours = int(duration[:-1]) * 24
        elif duration.endswith("h"):
            hours = int(duration[:-1])
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ä–æ–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 1d –∏–ª–∏ 2h")
            return
        
        until_ts = int(time.time()) + hours * 3600
        ban_user(user_id, until_ts, reason, message.from_user.id)
        log_action(message.from_user.id, "ban", user_id, f"–î–æ {until_ts}, –ø—Ä–∏—á–∏–Ω–∞: {reason}")
        
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {datetime.fromtimestamp(until_ts).strftime('%d.%m.%Y %H:%M')}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")

@dp.message(Command("unban"))
async def cmd_unban(message: Message):
    if message.from_user.id != OWNER_ID:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    
    parts = (message.text or "").split()
    if len(parts) < 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban user_id")
        return
    
    try:
        user_id = int(parts[1])
        unban_user(user_id)
        log_action(message.from_user.id, "unban", user_id)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    users_count = len(get_all_user_ids())
    tags_count = len(get_all_tags())
    
    conn = db()
    cur = conn.execute("SELECT COUNT(*) AS c FROM bans WHERE until_ts > ?", (int(time.time()),))
    bans_count = cur.fetchone()["c"]
    conn.close()
    
    stats_text = (
        "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}\n"
        f"üè∑Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤: {tags_count}\n"
        f"‚õî –ó–∞–±–∞–Ω–µ–Ω–æ: {bans_count}\n"
        f"üéØ –ó–∞–ø—É—Å–∫–æ–≤: {get_stat('start_count')}\n"
        f"üì¢ –†–∞—Å—Å—ã–ª–æ–∫: {get_stat('broadcasts')}\n"
        f"‚úÖ –ü—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {get_stat('admin_accepts')}\n"
        f"üõ°Ô∏è WebApp –∑–∞–ø—Ä–æ—Å–æ–≤: {get_stat('webapp_requests')}\n"
        f"‚ö° –ë—ã—Å—Ç—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {get_stat('quick_support_requests')}"
    )
    
    await message.answer(stats_text)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========

@dp.message()
async def on_private_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if is_banned(message.from_user.id):
        await message.answer("‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
        return
    
    add_or_touch_user(message.from_user.id, message.from_user.username)
    
    if is_admin(message.from_user.id):
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_id = message.from_user.id
        
        if message.reply_to_message:
            # –ê–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            uid = extract_uid_from_text(message.reply_to_message.text or "")
            if uid and get_current_admin(uid) == admin_id:
                admin_tag = get_admin_tag(admin_id) or f"admin_{admin_id}"
                prefix = f"‚úâÔ∏è **#{admin_tag}**\n\n"
                try:
                    await send_any(uid, message, prefix=prefix)
                    await log_dialog(message, False, admin_id, uid)
                    log_action(admin_id, "reply_to_user", uid)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞–º.")
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞
            await message.answer("‚ÑπÔ∏è –ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Reply –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        uid = message.from_user.id
        admin_id = get_current_admin(uid)
        
        if admin_id:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∏–∞–ª–æ–≥–µ —Å –∞–¥–º–∏–Ω–æ–º
            user_tag = get_user_tag(uid) or f"user_{uid}"
            prefix = f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\nüÜî ID: `{uid}` (#{user_tag})\n\n"
            try:
                await send_any(admin_id, message, prefix=prefix)
                await log_dialog(message, True, admin_id, uid)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –¥–∏–∞–ª–æ–≥–µ
            await message.answer(
                "‚ÑπÔ∏è –î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin\n\n"
                "üî• –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/admin - –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
                "/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                "/profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ"
            )

# ========== –ó–ê–ü–£–°–ö –ë–û–¢–ê ==========

async def main():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    init_db()
    run_migrations()
    
    logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        await dp.start_polling(bot, skip_updates=True)
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")